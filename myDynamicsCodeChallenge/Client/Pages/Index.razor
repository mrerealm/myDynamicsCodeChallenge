@page "/"
@inject HttpClient Http
@using myDynamicsCodeChallenge.Shared.Models
@using myDynamicsCodeChallenge.Shared.Enumerations

<div class="container-fluid">
    <img src="https://mydynamics.io/Content/images/logo.png" />
    <h4>myDynamics Code Challenge</h4>

    <div class="multiple-selector">
        <div class="row top-buffer">
            <div class="col-md-4">
                <h3>Left List</h3>
            </div>
            <div class="col-md-4">
                &nbsp;
            </div>
            <div class="col-md-4">
                <h3>Right List</h3>
            </div>
        </div>
        @if (Clauses == null)
        {
            <p><em>Loading Clauses from Database ...</em></p>
        }
        else
        {
            <div class="row">
                <div class="col-md-5 h-100 d-inline-block rounded listcontainer border border-primary">
                    <ul class="list-group">
                        @foreach (var item in Clauses.Where(c => c.Position == Position.Left).ToList())
                        {
                            <li class="cursor-pointer list-group-item @(SelectedLeftId == item.Id ? "active" : "")"
                                @onclick="@(() => Select(item))"
                                @ondblclick="MoveToRight">@item.Text</li>
                            }
                    </ul>
                </div>
                <div class="col-md-2 text-center">
                    <div class="multiple-selector-buttons">
                        <button type="button" class="mdButton btn btn-success w-100"
                                @onclick="MoveToRight"
                                hidden="@HideButton(Position.Left)">To Right >> </button><br />
                        <button type="button" class="mdButton btn btn-primary w-100"
                                @onclick="MoveToLeft"
                                hidden="@HideButton(Position.Right)">@toLeft To Left</button>

                        <div class="alert alert-danger fade show w-100 top-buffer small" role="alert" hidden="@HideError">
                            Select an item before moving it
                        </div>

                    </div>
                </div>
                <div class="col-md-5 h-100 d-inline-block rounded listcontainer border border-success">
                    <ul class="list-group checkbox-list-group">
                        @foreach (var item in Clauses.Where(c => c.Position == Position.Right).ToList())
                        {
                            <li class="cursor-pointer list-group-item list-group-item-success @(SelectedRightId == item.Id ? "active" : "")"
                                @onclick="@(() => Select(item))">
                                <input type="checkbox" @onchange="@((ChangeEventArgs e) => ToGenerateList(item, e))"> @item.Text
                            </li>

                        }
                    </ul>
                </div>
            </div>
            <div class="row top-buffer">
                <div class="col-md-5"></div>
                <div class="col-md-2">
                    <button type="button" class="mdButton btn btn-warning w-100" @onclick="GenerateClauses">Generate Clauses</button>
                </div>
                <div class="col-md-5"></div>
            </div>
            <div class="row top-buffer">
                <div class="col-md-12">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Clauses</span>
                        </div>
                        <textarea rows="4" class="form-control" aria-label="With textarea">@GeneratedClauses</textarea>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code
{
    private string toLeft = "<<";

    public bool HideError { get; set; } = true;
    public int SelectedLeftId { get; set; }
    public int SelectedRightId { get; set; }

    public List<ClauseModel> Clauses { get; set; }
    public List<ClauseModel> GenerateList { get; set; } = new List<ClauseModel>();
    public string GeneratedClauses { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Clauses = await Http.GetFromJsonAsync<List<ClauseModel>>($"api/clause/reset");
    }

    private void Select(ClauseModel item)
    {
        HideError = true;
        if (item.Position == Position.Left)
            SelectedLeftId = item.Id;
        else
            SelectedRightId = item.Id;
    }

    private void MoveToRight() => MoveToList(Position.Right);
    private void MoveToLeft() => MoveToList(Position.Left);

    private async void MoveToList(Position position)
    {
        int id = 0;
        if (position == Position.Right)
        { id = SelectedLeftId; SelectedLeftId = 0; }
        else
        { id = SelectedRightId; SelectedRightId = 0; }

        if (id > 0)
        {
            Clauses = await Http.GetFromJsonAsync<List<ClauseModel>>($"api/clause/{id}/{(int)position}");
            HideError = true;
            StateHasChanged();
        }
        else
            HideError = false;
    }

    private void ToGenerateList(ClauseModel item, ChangeEventArgs e)
    {
        if (item == null || e == null)
            return;

        var index = GenerateList.FindIndex(c => c.Id == item.Id);
        WriteToConsole($"{item.Text} {e.Value} {index >= 0}");
        if ((bool)e.Value)
        {
            if (index < 0)
                GenerateList.Add(item);
        }
        else
            if (index >= 0)
            GenerateList.RemoveAt(index);

        WriteToConsole(String.Join(",", GenerateList.Select(c => c.Text)));
    }

    private void GenerateClauses()
    {
        GeneratedClauses = String.Join(System.Environment.NewLine, GenerateList.OrderBy(c => c.Id).Select(c => c.Text));
        StateHasChanged();
        WriteToConsole(String.Join(",", GenerateList.OrderBy(c => c.Id).Select(c => c.Text)));
    }

    private bool HideButton(Position position) => !Clauses.Any(c => c.Position == position);

    private void WriteToConsole(string msg)
    {
        Console.WriteLine(msg);
    }
}

