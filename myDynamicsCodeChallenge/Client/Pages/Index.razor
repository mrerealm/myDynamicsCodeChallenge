@page "/"
@using System.Net.Http
@inject HttpClient Http
@using myDynamicsCodeChallenge.Shared.Models
@using myDynamicsCodeChallenge.Shared.Enumerations

<div class="container-fluid">
    <img src="https://mydynamics.io/Content/images/logo.png" />
    <h4>myDynamics Code Challenge</h4>

    <div class="multiple-selector">
        <div class="row top-buffer">
            <div class="col-md-4">
                <h3>Left List</h3>
            </div>
            <div class="col-md-4">
                &nbsp;
            </div>
            <div class="col-md-4">
                <h3>Right List</h3>
            </div>
        </div>
        @if (Clauses == null)
        {
            <p><em>Loading Clauses from Database ...</em></p>
        }
        else
        {
            <div class="row">
                <div class="col-md-4 h-100 d-inline-block rounded listcontainer border border-primary">
                    <ul class="list-group">
                        @foreach (var item in Clauses.Where(c => c.Position == Position.Left).ToList())
                        {
                            <li class="list-group-item @(SelectedLeftId == item.Id ? "active" : "")"
                                @onclick="@(() => Select(item.Id, Position.Left))"
                                @ondblclick="MoveToRight">@item.Text</li>
                            }
                    </ul>
                </div>
                <div class="col-md-4 text-center">
                    <div class="multiple-selector-buttons">
                        <button type="button" class="mdButton btn btn-success w-75" @onclick="MoveToRight">To Right >> </button><br />
                        <button type="button" class="mdButton btn btn-primary w-75" @onclick="MoveToLeft">@toLeft To Left</button>
                    </div>
                </div>
                <div class="col-md-4 h-100 d-inline-block rounded listcontainer border border-success">
                    <ul class="list-group">
                        @foreach (var item in Clauses.Where(c => c.Position == Position.Right).ToList())
                        {
                            <li class="list-group-item list-group-item-success @(SelectedRightId == item.Id ? "active" : "")"
                                @onclick="@(() => Select(item.Id, Position.Right))">@item.Text</li>
                            }
                    </ul>
                </div>
            </div>
            <div class="row top-buffer">
                <div class="col-md-4">
                    <button type="button" class="mdButton btn btn-warning w-100" @onclick="GenerateClauses">Generate Clauses</button>
                </div>
                <div class="col-md-8">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Clauses</span>
                        </div>
                        <textarea class="form-control" aria-label="With textarea">@GeneratedClauses</textarea>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code {
    private string toLeft = "<<";
    public int SelectedLeftId { get; set; }
    public int SelectedRightId { get; set; }
    public List<ClauseModel> Clauses { get; set; }
    public string GeneratedClauses { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Clauses = await Http.GetFromJsonAsync<List<ClauseModel>>($"api/clause/reset");
    }

    private void Select(int id, Position position)
    {
        if (position == Position.Left)
            SelectedLeftId = id;
        else
            SelectedRightId = id;

        WriteToConsole($"Selected {id}");
    }

    private async void MoveToRight()
    {

        if (SelectedLeftId > 0)
        {
            WriteToConsole($"MoveToRight {SelectedLeftId}?");
            Clauses = await Http.GetFromJsonAsync<List<ClauseModel>>($"api/clause/{SelectedLeftId}/{(int)Position.Right}");
            StateHasChanged();
        }
    }

    private async void MoveToLeft()
    {
        WriteToConsole($"MoveToLeft {SelectedRightId}?");
        if (SelectedRightId > 0)
        {
            Clauses = await Http.GetFromJsonAsync<List<ClauseModel>>($"api/clause/{SelectedLeftId}/{(int)Position.Left}");
            StateHasChanged();
        }
    }

    private void GenerateClauses()
    {
        var rightClauses = Clauses.Where(c => c.Position == Position.Right).Select(c => c.Text);
        GeneratedClauses = String.Join(System.Environment.NewLine, rightClauses);
        StateHasChanged();
    }

    private void WriteToConsole(string msg)
    {
        Console.WriteLine(msg);
    }
}

